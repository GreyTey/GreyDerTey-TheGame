#include <FastLED.h>
#include <avr\pgmspace.h>

#define MATRIX  8
#define PINX    A0
#define PINY    A1
#define PINK    A2
#define POTIENTOMETER A3
#define SUMMER    A4

const long start[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0x990000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xffffff, 0xff0000, 0xffffff, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0xff0000, 0xff0000, 0xff0000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990000, 0x990000, 0x990000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long map00[] PROGMEM =
{
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x0000ff, 0x0000ff, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x0000ff, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x33ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x33ff00, 0x33ff00, 0x33ff00, 0xff0000, 0x33ff00, 0x33ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x33ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x33ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x33ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x33ff00, 0x33ff00, 0x33ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x33ff00, 0x33ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
};

const long map01[] PROGMEM =
{
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x0000ff, 0x0000ff, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x0000ff, 0x0000ff, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
};

const long map02[] PROGMEM =
{
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x12ff00, 0x05ff00, 0x0eff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x0bff00, 0x1bff00, 0x07ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0xff0000, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x0000ff, 0x0000ff, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x0000ff, 0x0000ff, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
};

const long map03a[] PROGMEM =
{
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x0000fe, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x0000fe, 0x0000fe, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x0000fe, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
};

const long map03b[] PROGMEM =
{
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x0000fe, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x0000fe, 0x0000fe, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x0000fe, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
};

const long map03c[] PROGMEM =
{
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x0000fe, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x0000fe, 0x0000fe, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x0000fe, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000,
  0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0x00ff00, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
  0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000
};

const long winScreen[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000,
  0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xfafafa, 0xffffff, 0xfafafa, 0xffffff, 0xffff00, 0x000000,
  0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000,
  0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000,
  0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000,
  0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000,
  0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000,
  0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

const long loseScreen[] PROGMEM =
{
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
  0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};


CRGB ledArr[256];
CRGB isOver;
int intledArr[256];
int ledIndex = 203;
int ledPos = 203;
int mapCounter = -1;
int mapSwitcher = 0;
boolean mapSpawn00 = true;
boolean mapSpawn02 = true;
boolean mapSpawn03 = true;


void setup() {
  FastLED.addLeds<NEOPIXEL, MATRIX>(ledArr, 256); // Init of the Fastled library
  FastLED.setBrightness(15);
  pinMode(PINX, INPUT_PULLUP);
  pinMode(PINY, INPUT_PULLUP);
  pinMode(POTIENTOMETER, INPUT);
  pinMode(SUMMER, OUTPUT);

  //Die LEDS werden in ein Array gefügt

  //Reihe 1
  for (int i = 0; i < 16; i++) {
    ledArr[i] = i;
  }

  //Reihe 2
  int j = 0;
  for (int i = 16; i < 32; i++) {
    ledArr[i] = 31 - j;
    j++;
  }

  //Reihe 3
  for (int i = 32; i < 48; i++) {
    ledArr[i] = i;
  }

  //Reihe 4
  j = 0;
  for (int i = 48; i < 64; i++) {
    ledArr[i] = 63 - j;
    j++;
  }

  //Reihe 5
  for (int i = 64; i < 80; i++) {
    ledArr[i] = i;
  }

  //Reihe 6
  j = 0;
  for (int i = 80; i < 96; i++) {
    ledArr[i] = 95 - j;
    j++;
  }

  //Reihe 7
  for (int i = 96; i < 112; i++) {
    ledArr[i] = i;
  }

  //Reihe 8
  j = 0;
  for (int i = 112; i < 128; i++) {
    ledArr[i] = 127 - j;
    j++;
  }

  //Reihe 9
  for (int i = 128; i < 144; i++) {
    ledArr[i] = i;
  }

  //Reihe 10
  j = 0;
  for (int i = 144; i < 160; i++) {
    ledArr[i] = 159 - j;
    j++;
  }

  //Reihe 11
  for (int i = 160; i < 176; i++) {
    ledArr[i] = i;
  }

  //Reihe 12
  j = 0;
  for (int i = 176; i < 192; i++) {
    ledArr[i] = 191 - j;
    j++;
  }

  //Reihe 13
  for (int i = 192; i < 208; i++) {
    ledArr[i] = i;
  }

  //Reihe 14
  j = 0;
  for (int i = 208; i < 224; i++) {
    ledArr[i] = 223 - j;
    j++;
  }

  //Reihe 15
  for (int i = 224; i < 240; i++) {
    ledArr[i] = i;
  }

  //Reihe 16
  j = 0;
  for (int i = 240; i < 256; i++) {
    ledArr[i] = 255 - j;
    j++;
  }

  //Dasselbe für ein zweites Array
  for (int i = 0; i < 16; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 16; i < 32; i++) {
    intledArr[i] = 31 - j;
    j++;
  }
  for (int i = 32; i < 48; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 48; i < 64; i++) {
    intledArr[i] = 63 - j;
    j++;
  }

  for (int i = 64; i < 80; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 80; i < 96; i++) {
    intledArr[i] = 95 - j;
    j++;
  }

  for (int i = 96; i < 112; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 112; i < 128; i++) {
    intledArr[i] = 127 - j;
    j++;
  }

  for (int i = 128; i < 144; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 144; i < 160; i++) {
    intledArr[i] = 159 - j;
    j++;
  }

  for (int i = 160; i < 176; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 176; i < 192; i++) {
    intledArr[i] = 191 - j;
    j++;
  }

  for (int i = 192; i < 208; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 208; i < 224; i++) {
    intledArr[i] = 223 - j;
    j++;
  }

  for (int i = 224; i < 240; i++) {
    intledArr[i] = i;
  }

  j = 0;
  for (int i = 240; i < 256; i++) {
    intledArr[i] = 255 - j;
    j++;
  }

}

void loop() {
  int x = analogRead(PINX);
  int y = analogRead(PINY);
  int xKoordinate = 0;
  int yKoordinate = 0;
  int potientometer = analogRead(POTIENTOMETER);
  int brightness = map(potientometer, 0, 1023, 5, 50);
  
  //Joysticksteuerung vereinfachen
  if (x <= 100) {
    xKoordinate = 1;
  } else if (x >= 1000) {
    xKoordinate = -1;
  }
  if (y <= 100) {
    yKoordinate = 1;
  } else if (y >= 1000) {
    yKoordinate = -1;
  }

  //Steuerung eines einzelnen LEDs (Spieler)
  for (int i = 0; i < 256; i++) {
    if (i == ledPos) {
      if (xKoordinate == 1) {
        ledIndex = intledArr[ledPos + 16];
        ledPos += 16;
        delay(50);
        break;
      }
      if (xKoordinate == -1) {
        ledIndex = intledArr[ledPos - 16];
        ledPos -= 16;
        delay(50);
        break;
      }
      if (yKoordinate == 1) {
        ledIndex = intledArr[ledPos - 1];
        ledPos -= 1;
        delay(50);
        break;
      }
      if (yKoordinate == -1) {
        ledIndex = intledArr[ledPos + 1];
        ledPos += 1;
        delay(50);
        break;
      }
    }
  }

  //Änderung der Map falls der richtige Ort erreicht wurde
  SwitchMap();
  isOver = ledArr[ledIndex];
  FastLED.setBrightness(brightness);
  ledArr[ledIndex].setRGB(255, 255, 255);
  FastLED.show();
  mapSwitcher ++;
  FastLED.clear();
}

void GameOver() {
  FastLED.clear();
  for (int i = 0; i < 256; i++) {
    ledArr[i] = pgm_read_dword(&(loseScreen[i]));
  }
  FastLED.show();
  tone(SUMMER, 2000); // Send 1KHz sound signal...
  delay(1000);        // ...for 1 sec
  noTone(SUMMER);     // Stop sound...
  delay(1000);        // ...for 1sec
}

void Win() {
  FastLED.clear();
  for (int i = 0; i < 256; i++) {
    ledArr[i] = pgm_read_dword(&(winScreen[i]));
  }
  FastLED.show();
  tone(SUMMER, 1000); // Send 1KHz sound signal...
  delay(1000);        // ...for 1 sec
  noTone(SUMMER);     // Stop sound...
  delay(1000);        // ...for 1sec
}

//Map wird geändert, wenn der Punkt aufs blaue tritt
void SwitchMap() {
  if (isOver.r == 153) {
    mapCounter = 0;
  }
  if (isOver.r == 255 || ledIndex < 0 || ledIndex > 255) {
    GameOver();
    exit(0);
  } else if (isOver.b == 254) {
    Win();
    exit(0);
  } else if (isOver. b == 255) {
    mapCounter++;
  }
  if (mapCounter == 3 && mapSwitcher >= 30) {
    mapSwitcher = 0;
  }
  if (mapCounter == -1) {
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(start[i]));
      if (isOver.r == 255) {
        mapCounter = 1;
      }
    }
  } else if (mapCounter == 0) {
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(map00[i]));
    }
    if (mapSpawn03) {
      ledIndex = 203;
      ledPos = 203;
      mapSpawn03 = false;
    }
  } else if (mapCounter == 1) {
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(map01[i]));
    }
  } else if (mapCounter == 2) {
    if (mapSpawn02) {
      ledIndex = 43;
      ledPos = 43;
      mapSpawn02 = false;
    }
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(map02[i]));
    }
  }
  
  //Map 3 hat Animationen
  else if (mapCounter == 3 && mapSwitcher <= 9) {
    if (mapSpawn03) {
      ledIndex = 130;
      ledPos = 130;
      mapSpawn03 = false;
    }
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(map03a[i]));
    }
    FastLED.show();
  } else if (mapCounter == 3 && mapSwitcher >= 10 && mapSwitcher <= 19) {
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(map03b[i]));
    }
    FastLED.show();
  } else if (mapCounter == 3 && mapSwitcher >= 20 && mapSwitcher <= 29) {
    for (int i = 0; i < 256; i++) {
      ledArr[i] = pgm_read_dword(&(map03c[i]));
    }
    FastLED.show();
  }
  FastLED.show();
}
